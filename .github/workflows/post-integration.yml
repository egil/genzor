name: "Post-Integration"

on:
  push:
    branches:
      - main
      - '!release'
    paths:
      - '**'
      - '!samples/**'

env:
  NUGET_REPO_URL: 'https://nuget.pkg.github.com/egil/index.json'

jobs:
  create-pre-release:
    runs-on: ubuntu-latest
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öõÔ∏è Sets environment variables - branch-name
        uses: nelonoel/branch-name@v1.0.1

      - name: ‚öõÔ∏è Sets environment variables - Nerdbank.GitVersioning
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: ‚öôÔ∏è Setup dotnet 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: ‚öôÔ∏è Setup dotnet 5.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: üßπ Clean
        run: dotnet clean -c Release && dotnet nuget locals all --clear

      - name: üîÅ Restore packages
        run: dotnet restore

      - name: üõ†Ô∏è Build
        run: dotnet build -c Release --no-restore -p:RepositoryBranch=$BRANCH_NAME -p:ContinousIntegrationBuild=true -p:PublicRelease=false -p:UseSourceLink=true

      - name: üß™ Run unit tests
        run: dotnet test -c Release --no-build
      
      - name: üó≥Ô∏è Creating library package for pre-release
        run: dotnet pack -c Release --no-restore -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH_NAME -p:ContinousIntegrationBuild=true -p:PublicRelease=false -p:UseSourceLink=true

      - name: üì¶ Push packages to GitHub Package Registry
        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/*.nupkg -k ${{ secrets.GITHUB_TOKEN }} -s ${{ env.NUGET_REPO_URL }} --skip-duplicate
  sonar-cloud:
    name: sonarcloud-scan
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"egil_genzor" /o:"egil" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build genzor.sln
          dotnet test genzor.sln /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute\"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"        
